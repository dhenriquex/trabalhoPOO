/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhopoo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author pimen
 */
public class Consult extends javax.swing.JFrame {
    
    static String driverJDBC = "com.mysql.cj.jdbc.Driver";  // driver atualizado
    static String url = "jdbc:mysql://localhost:3306/veiculos?useTimezone=true&serverTimezone=UTC";

    static String user = "root";
    static String senha = "Davi100445#";
    Connection conexao;
    /**
     * Creates new form NewJFrame
     */
    public Consult() {
        initComponents();
        jIFtable.setVisible(false);
    }
    
    public class Conexao {
        public static Connection getConexao() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/veiculos?useTimezone=true&serverTimezone=UTC";

            String user = "root";
            String senha = "Davi100445#";
            return DriverManager.getConnection(url, user, senha);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPcabecalho = new javax.swing.JPanel();
        jLconsulta = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jIFconsulta = new javax.swing.JInternalFrame();
        jLplaca = new javax.swing.JLabel();
        jTFplaca = new javax.swing.JTextField();
        jBconsultar = new javax.swing.JButton();
        jBvoltar = new javax.swing.JButton();
        jIFtable = new javax.swing.JInternalFrame();
        jLresults = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTconsulta = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPcabecalho.setBackground(new java.awt.Color(204, 255, 255));
        jPcabecalho.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLconsulta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLconsulta.setText("CONSULTAR");

        javax.swing.GroupLayout jPcabecalhoLayout = new javax.swing.GroupLayout(jPcabecalho);
        jPcabecalho.setLayout(jPcabecalhoLayout);
        jPcabecalhoLayout.setHorizontalGroup(
            jPcabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPcabecalhoLayout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(jLconsulta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPcabecalhoLayout.setVerticalGroup(
            jPcabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPcabecalhoLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLconsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 619, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jIFconsulta.setVisible(true);

        jLplaca.setText("Placa:");

        jTFplaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFplacaActionPerformed(evt);
            }
        });

        jBconsultar.setText("Consultar");
        jBconsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBconsultarActionPerformed(evt);
            }
        });

        jBvoltar.setText("Voltar");
        jBvoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBvoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jIFconsultaLayout = new javax.swing.GroupLayout(jIFconsulta.getContentPane());
        jIFconsulta.getContentPane().setLayout(jIFconsultaLayout);
        jIFconsultaLayout.setHorizontalGroup(
            jIFconsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jIFconsultaLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLplaca, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFplaca, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBconsultar)
                .addGap(31, 31, 31)
                .addComponent(jBvoltar)
                .addGap(59, 59, 59))
        );
        jIFconsultaLayout.setVerticalGroup(
            jIFconsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jIFconsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jIFconsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLplaca)
                    .addComponent(jTFplaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBconsultar)
                    .addComponent(jBvoltar))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jIFtable.setVisible(true);

        jLresults.setText("Resultados");

        jTconsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Placa", "Data Fabricação", "Modelo", "Marca", "Preço", "Cor", "Tipo de Veículo"
            }
        ));
        jScrollPane1.setViewportView(jTconsulta);

        javax.swing.GroupLayout jIFtableLayout = new javax.swing.GroupLayout(jIFtable.getContentPane());
        jIFtable.getContentPane().setLayout(jIFtableLayout);
        jIFtableLayout.setHorizontalGroup(
            jIFtableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jIFtableLayout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(jLresults)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jIFtableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jIFtableLayout.setVerticalGroup(
            jIFtableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jIFtableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLresults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPcabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jIFconsulta)
            .addComponent(jIFtable)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPcabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jIFconsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jIFtable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFplacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFplacaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFplacaActionPerformed

    private void jBconsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBconsultarActionPerformed
     String placaDigitada = jTFplaca.getText().trim();
       
if (placaDigitada.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Digite uma placa.");
    return;
}

try (Connection conn = Conexao.getConexao()) {
    String sql = "SELECT * FROM veiculo WHERE placa = ?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, placaDigitada);
    ResultSet rs = stmt.executeQuery();

    DefaultTableModel model = (DefaultTableModel) jTconsulta.getModel();
    model.setRowCount(0); // limpa a tabela
    
    boolean encontrou = false;
    
    while (rs.next()) {
        int veiculoId = rs.getInt("id"); // Pega o ID do veículo para usar como FK
        String tipo = rs.getString("tipo");
        
        // Define colunas básicas iniciais
        Vector<String> colunasBasicas = new Vector<>();
        colunasBasicas.add("Placa");
        colunasBasicas.add("Data Fabricação");
        colunasBasicas.add("Modelo");
        colunasBasicas.add("Marca");
        colunasBasicas.add("Preço");
        colunasBasicas.add("Cor");
        colunasBasicas.add("Tipo");
        
        Vector<Object> dadosLinha = new Vector<>();
        dadosLinha.add(rs.getString("placa"));
        dadosLinha.add(rs.getString("data_fabricacao"));
        dadosLinha.add(rs.getString("modelo"));
        dadosLinha.add(rs.getString("marca"));
        dadosLinha.add(rs.getDouble("preco"));
        dadosLinha.add(rs.getString("cor"));
        dadosLinha.add(tipo);
        
        // Adiciona colunas específicas baseado no tipo
        if ("carga".equalsIgnoreCase(tipo)) {
            // Adiciona colunas específicas de carga
            colunasBasicas.add("Carga Máxima");
            colunasBasicas.add("Nº Eixos");
            colunasBasicas.add("Carroceria");
            colunasBasicas.add("Compartimentos");
            colunasBasicas.add("Articulado");
            colunasBasicas.add("Resfriado");
            colunasBasicas.add("GPS");
            colunasBasicas.add("Tipo Carga");
            colunasBasicas.add("Comprimento");
            
            // CORRIGIDO: Usa o ID numérico e nomes corretos das colunas
            String sqlCarga = "SELECT * FROM veiculo_carga WHERE id = ?";
            PreparedStatement stmtCarga = conn.prepareStatement(sqlCarga);
            stmtCarga.setInt(1, veiculoId); // Usa o ID numérico, não a placa
            ResultSet rsCarga = stmtCarga.executeQuery();
            
            System.out.println("Buscando dados de carga para ID: " + veiculoId); // Debug
            
            if (rsCarga.next()) {
                System.out.println("Dados de carga encontrados!"); // Debug
                dadosLinha.add(rsCarga.getDouble("carga")); // CORRIGIDO: era "carga_maxima"
                dadosLinha.add(rsCarga.getInt("numero_eixos"));
                dadosLinha.add(rsCarga.getString("tipo_carroceria"));
                dadosLinha.add(rsCarga.getInt("qtd_compartimentos")); // CORRIGIDO: era "qtd_compartimento"
                dadosLinha.add(rsCarga.getBoolean("articulada") ? "Sim" : "Não"); // CORRIGIDO: era "articulado"
                dadosLinha.add(rsCarga.getBoolean("refrigerada") ? "Sim" : "Não"); // CORRIGIDO: era "resfriado"
                dadosLinha.add(rsCarga.getBoolean("rastreamento_gps") ? "Sim" : "Não");
                dadosLinha.add(rsCarga.getString("tipo_carga"));
                dadosLinha.add(rsCarga.getDouble("comprimento_total")); // CORRIGIDO: era "comprimento"
            } else {
                System.out.println("Nenhum dado específico de carga encontrado!"); // Debug
                // Se não encontrar dados específicos, adiciona valores vazios
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
            }
            
        } else if ("passeio".equalsIgnoreCase(tipo)) {
            // Adiciona colunas específicas de passeio (apenas as que existem no banco)
            colunasBasicas.add("Qtd Portas");
            colunasBasicas.add("Ar Condicionado");
            colunasBasicas.add("Tipo Câmbio");
            colunasBasicas.add("Direção");
            
            // CORRIGIDO: Usa o ID numérico
            String sqlPasseio = "SELECT * FROM veiculo_passeio WHERE id = ?";
            PreparedStatement stmtPasseio = conn.prepareStatement(sqlPasseio);
            stmtPasseio.setInt(1, veiculoId); // Usa o ID numérico, não a placa
            ResultSet rsPasseio = stmtPasseio.executeQuery();
            
            System.out.println("Buscando dados de passeio para ID: " + veiculoId); // Debug
            
            if (rsPasseio.next()) {
                System.out.println("Dados de passeio encontrados!"); // Debug
                dadosLinha.add(rsPasseio.getInt("qtd_portas"));
                dadosLinha.add(rsPasseio.getBoolean("ar_condicionado") ? "Sim" : "Não");
                dadosLinha.add(rsPasseio.getString("tipo_cambio"));
                dadosLinha.add(rsPasseio.getString("tipo_direcao"));
            } else {
                System.out.println("Nenhum dado específico de passeio encontrado!"); // Debug
                // Se não encontrar dados específicos, adiciona valores vazios
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
                dadosLinha.add("");
            }
        }
        
        // Aplica as colunas dinamicamente
        model.setColumnIdentifiers(colunasBasicas);
        
        // Adiciona a linha com os dados
        model.addRow(dadosLinha);
        
        encontrou = true;
    }
    
    if(encontrou){
        jIFtable.setVisible(true);
    } else { 
        JOptionPane.showMessageDialog(this, "Nenhum veículo encontrado.");
        jIFtable.setVisible(false);
    }
    
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Erro ao consultar: " + e.getMessage());
}
     
    }//GEN-LAST:event_jBconsultarActionPerformed

    private void jBvoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBvoltarActionPerformed
        this.dispose(); // Fecha a janela atual
    }//GEN-LAST:event_jBvoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBconsultar;
    private javax.swing.JButton jBvoltar;
    private javax.swing.JInternalFrame jIFconsulta;
    private javax.swing.JInternalFrame jIFtable;
    private javax.swing.JLabel jLconsulta;
    private javax.swing.JLabel jLplaca;
    private javax.swing.JLabel jLresults;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPcabecalho;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFplaca;
    private javax.swing.JTable jTconsulta;
    // End of variables declaration//GEN-END:variables
}
